Model:
    There are a number of actors running at every point. Every actor has the following properties:
        Registers (all 64 bit):
            $ip: selects the current instruction
            $ra: should be used to store addresses, but is general purpose
            $rx, $ry, $rz: general purpose
            $brian: please refrain from using brian
            #N (N is any 64 bit integer): Pseudo-register containing the constant N
        Name (string)
        Memory: list of arbitrarily many u64s
        Currently executed human instruction:
            Actual instruction
            Previous answers

        Message handlers: list of
            atom: u64
            expected-content-len: u64
            content-addr: u64
            run-ip: u64

Human instructions:
    Set reg reg
    SetMem addr reg
    ReadMem reg addr
    {Add, Sub, Mul, Div} reg reg reg
    {LT, LE, EQ, GE, GT} reg reg reg

Every human instruction:
    The human is presented with all registers, all of the RAM and one textual instruction
    eg. >
        ip: 0xff11879032
        rhen: 0x0
        rx: 5
        rden: 335

        Assign rx + rden to rhen

Computer instructions:
    Idle

        wait for next matching message

    Send-msg
        u64 receiver
        u64 atom
        u64 content-len
        u64 content-addr

        send a message

    Make-handler
        u64 atom
        u64 expected-content-len
        u64 store-content-addr
        u64 run-ip

        make a message handler

    Self-addr
        lvalue store-addr

    Create-actor
        u64 direct-run-ip
        lvalue store-addr

        creats an actor running direct-run-ip. ra contains the address of the creator

    Print
        u64 len
        u64 content-addr

Instruction encoding:
    Instruction as one byte:
        Set - 0x53 = 'S'
        SetMem - 0x73 = 's'
        ReadMem - 0x52 = 'R'

        Add - 0x2b = '+'
        Sub - 0x2d = '-'
        Mul - 0x2a = "*"
        Div - 0x2f = '/'

        LT - 0x3c = '<'
        LE - 0x5b = '['
        EQ - 0x3d = '='
        GT - 0x3e = '>'
        GE - 0x5d = ']'

        Idle - 0x49 = 'I'
        Send-msg - 0x5c = '^'
        Make-handler - 0x21 = '!'
        Self-addr - 0x3f = '?'
        Create-actor - 0x7d = '}'
        Print - 0x23 = '#'

    Registers are encoded as one byte:
        $rip - 0x40 = '@'
        $ra - 0x41 = 'A'
        $rhen - 0x48 = 'H'
        $rx - 0x78 = 'x'
        $ry - 0x79 = 'y'
        $rz - 0x7a = 'z'
        $brian - 0x58 = 'X'
        $N - 0x4e N = 'N' N (N is encoded as big-endian number)
